drop trigger if exists "set_pedido_total_trigger" on "public"."pedidos";

drop function if exists "public"."update_pedido_total"();

create table "public"."adicional" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "nome" text not null default ''::text,
    "preco_in_cents" bigint not null,
    "produto_id" bigint not null
);


alter table "public"."adicional" enable row level security;

create table "public"."payment" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "stripe_id" text,
    "cliente_id" uuid not null,
    "total_in_cents" bigint not null,
    "total_gorjeta" bigint not null
);


alter table "public"."payment" enable row level security;

create table "public"."pedido_adicional" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "pedido_id" bigint not null,
    "adicional_id" bigint not null
);


alter table "public"."pedido_adicional" enable row level security;

alter table "public"."clientes" add column "checkout_by" uuid;

alter table "public"."clientes" add column "checkout_date" timestamp with time zone;

alter table "public"."pedidos" add column "pago" text not null default ''::text;

alter table "public"."produtos" drop column "sub_categoria";

CREATE UNIQUE INDEX adicional_nome_key ON public.adicional USING btree (nome);

CREATE UNIQUE INDEX adicional_pkey ON public.adicional USING btree (id);

CREATE UNIQUE INDEX payment_pkey ON public.payment USING btree (id);

CREATE UNIQUE INDEX pedido_adicional_pkey ON public.pedido_adicional USING btree (pedido_id, adicional_id);

alter table "public"."adicional" add constraint "adicional_pkey" PRIMARY KEY using index "adicional_pkey";

alter table "public"."payment" add constraint "payment_pkey" PRIMARY KEY using index "payment_pkey";

alter table "public"."pedido_adicional" add constraint "pedido_adicional_pkey" PRIMARY KEY using index "pedido_adicional_pkey";

alter table "public"."adicional" add constraint "adicional_nome_key" UNIQUE using index "adicional_nome_key";

alter table "public"."adicional" add constraint "adicional_produto_id_fkey" FOREIGN KEY (produto_id) REFERENCES produtos(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."adicional" validate constraint "adicional_produto_id_fkey";

alter table "public"."clientes" add constraint "clientes_checkout_by_fkey" FOREIGN KEY (checkout_by) REFERENCES info_admin(id) ON UPDATE CASCADE ON DELETE SET DEFAULT not valid;

alter table "public"."clientes" validate constraint "clientes_checkout_by_fkey";

alter table "public"."payment" add constraint "payment_cliente_id_fkey" FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON UPDATE CASCADE ON DELETE SET DEFAULT not valid;

alter table "public"."payment" validate constraint "payment_cliente_id_fkey";

alter table "public"."pedido_adicional" add constraint "pedido_adicional_adicional_id_fkey" FOREIGN KEY (adicional_id) REFERENCES adicional(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."pedido_adicional" validate constraint "pedido_adicional_adicional_id_fkey";

alter table "public"."pedido_adicional" add constraint "pedido_adicional_pedido_id_fkey" FOREIGN KEY (pedido_id) REFERENCES pedidos(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."pedido_adicional" validate constraint "pedido_adicional_pedido_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_pedido_add_adicional_price()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  UPDATE pedidos
  SET total_in_cents = total_in_cents + (select preco_in_cents from adicional where id = NEW.adicional_id)
  WHERE pedidos.id = NEW.pedido_id;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_pedido_total_quantidade()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Calculate the total_in_cents before inserting the new row
  NEW.total_in_cents = (SELECT preco_in_cents FROM produtos WHERE id = NEW.produto) * NEW.quantidade;
  RETURN NEW;
END;
$function$
;

create policy "Enable all for authenticated users only"
on "public"."adicional"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."adicional"
as permissive
for select
to public
using (true);


create policy "Enable insert access for all users"
on "public"."pedido_adicional"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."pedido_adicional"
as permissive
for select
to public
using (true);


CREATE TRIGGER update_pedido_total_ingrediente_trigger BEFORE INSERT ON public.pedido_adicional FOR EACH ROW EXECUTE FUNCTION update_pedido_add_adicional_price();

CREATE TRIGGER set_pedido_total_trigger BEFORE INSERT ON public.pedidos FOR EACH ROW EXECUTE FUNCTION update_pedido_total_quantidade();


